# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import plugins.callback.kobe.kobe_pb2 as kobe__pb2


class KobeApiStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProject = channel.unary_unary(
            '/api.KobeApi/CreateProject',
            request_serializer=kobe__pb2.CreateProjectRequest.SerializeToString,
            response_deserializer=kobe__pb2.CreateProjectResponse.FromString,
        )
        self.ListProject = channel.unary_unary(
            '/api.KobeApi/ListProject',
            request_serializer=kobe__pb2.ListProjectRequest.SerializeToString,
            response_deserializer=kobe__pb2.ListProjectResponse.FromString,
        )
        self.GetInventory = channel.unary_unary(
            '/api.KobeApi/GetInventory',
            request_serializer=kobe__pb2.GetInventoryRequest.SerializeToString,
            response_deserializer=kobe__pb2.GetInventoryResponse.FromString,
        )
        self.RunPlaybook = channel.unary_stream(
            '/api.KobeApi/RunPlaybook',
            request_serializer=kobe__pb2.RunPlaybookRequest.SerializeToString,
            response_deserializer=kobe__pb2.WatchStream.FromString,
        )
        self.SaveResult = channel.unary_unary(
            '/api.KobeApi/SaveResult',
            request_serializer=kobe__pb2.SaveResultRequest.SerializeToString,
            response_deserializer=kobe__pb2.SaveResultResponse.FromString,
        )
        self.GetResult = channel.unary_unary(
            '/api.KobeApi/GetResult',
            request_serializer=kobe__pb2.GetResultRequest.SerializeToString,
            response_deserializer=kobe__pb2.GetResultResponse.FromString,
        )


class KobeApiServicer(object):
    """Missing associated documentation comment in .proto file"""

    def CreateProject(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProject(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventory(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunPlaybook(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveResult(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KobeApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'CreateProject': grpc.unary_unary_rpc_method_handler(
            servicer.CreateProject,
            request_deserializer=kobe__pb2.CreateProjectRequest.FromString,
            response_serializer=kobe__pb2.CreateProjectResponse.SerializeToString,
        ),
        'ListProject': grpc.unary_unary_rpc_method_handler(
            servicer.ListProject,
            request_deserializer=kobe__pb2.ListProjectRequest.FromString,
            response_serializer=kobe__pb2.ListProjectResponse.SerializeToString,
        ),
        'GetInventory': grpc.unary_unary_rpc_method_handler(
            servicer.GetInventory,
            request_deserializer=kobe__pb2.GetInventoryRequest.FromString,
            response_serializer=kobe__pb2.GetInventoryResponse.SerializeToString,
        ),
        'RunPlaybook': grpc.unary_stream_rpc_method_handler(
            servicer.RunPlaybook,
            request_deserializer=kobe__pb2.RunPlaybookRequest.FromString,
            response_serializer=kobe__pb2.WatchStream.SerializeToString,
        ),
        'SaveResult': grpc.unary_unary_rpc_method_handler(
            servicer.SaveResult,
            request_deserializer=kobe__pb2.SaveResultRequest.FromString,
            response_serializer=kobe__pb2.SaveResultResponse.SerializeToString,
        ),
        'GetResult': grpc.unary_unary_rpc_method_handler(
            servicer.GetResult,
            request_deserializer=kobe__pb2.GetResultRequest.FromString,
            response_serializer=kobe__pb2.GetResultResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'api.KobeApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class KobeApi(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def CreateProject(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/CreateProject',
                                             kobe__pb2.CreateProjectRequest.SerializeToString,
                                             kobe__pb2.CreateProjectResponse.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProject(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/ListProject',
                                             kobe__pb2.ListProjectRequest.SerializeToString,
                                             kobe__pb2.ListProjectResponse.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInventory(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/GetInventory',
                                             kobe__pb2.GetInventoryRequest.SerializeToString,
                                             kobe__pb2.GetInventoryResponse.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunPlaybook(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.KobeApi/RunPlaybook',
                                              kobe__pb2.RunPlaybookRequest.SerializeToString,
                                              kobe__pb2.WatchStream.FromString,
                                              options, channel_credentials,
                                              call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveResult(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/SaveResult',
                                             kobe__pb2.SaveResultRequest.SerializeToString,
                                             kobe__pb2.SaveResultResponse.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/GetResult',
                                             kobe__pb2.GetResultRequest.SerializeToString,
                                             kobe__pb2.GetResultResponse.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)
