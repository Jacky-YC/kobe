// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-03-07 22:50:10.607912 +0800 CST m=+0.435166962

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/playbooks/": {
            "get": {
                "description": "List all playbooks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playbook"
                ],
                "summary": "List playbooks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Playbook"
                            }
                        }
                    }
                }
            }
        },
        "/playbooks/{dir}": {
            "get": {
                "description": "List all playbooks under dir",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playbook"
                ],
                "summary": "List playbooks under dir",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dir",
                        "name": "dir",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Playbook"
                            }
                        }
                    }
                }
            }
        },
        "/result/{uid}": {
            "get": {
                "description": "Get task result by task id when task finished",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "result"
                ],
                "summary": "Get Task Result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task_uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/runner/im/adhoc/": {
            "post": {
                "description": "Run Adhoc Task with Inventory Object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runner"
                ],
                "summary": "ImRunAdhoc",
                "parameters": [
                    {
                        "description": "request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ImRunAdhocRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                }
            }
        },
        "/runner/im/playbook/": {
            "post": {
                "description": "Create Run Playbook Task with Inventory Object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runner"
                ],
                "summary": "ImRunPlaybook",
                "parameters": [
                    {
                        "description": "request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RunPlaybookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                }
            }
        },
        "/tasks/": {
            "get": {
                "description": "List task info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "List Task Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                }
            }
        },
        "/tasks/{uid}": {
            "get": {
                "description": "Get task info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Get Task Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task_uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Group": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hosts.json": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Host"
                    }
                },
                "name": {
                    "type": "string"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.Host": {
            "type": "object",
            "properties": {
                "connection": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.ImRunAdhocRequest": {
            "type": "object",
            "properties": {
                "arg": {
                    "type": "string"
                },
                "inventory": {
                    "type": "object",
                    "$ref": "#/definitions/models.Inventory"
                },
                "module": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            }
        },
        "models.Inventory": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Group"
                    }
                },
                "hosts.json": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Host"
                    }
                }
            }
        },
        "models.Playbook": {
            "type": "object",
            "properties": {
                "dir": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Result": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "logfile": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "stdout": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.RunPlaybookRequest": {
            "type": "object",
            "properties": {
                "dir": {
                    "type": "string"
                },
                "inventory": {
                    "type": "string"
                },
                "playbook": {
                    "type": "string"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "created_time": {
                    "type": "string"
                },
                "finished": {
                    "type": "boolean"
                },
                "inventory": {
                    "type": "object",
                    "$ref": "#/definitions/models.Inventory"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "",
	BasePath:    "/api/v1/",
	Schemes:     []string{},
	Title:       "Kobe Restful API",
	Description: "This is RestAPI Client for ansible",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
